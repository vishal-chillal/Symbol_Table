     1                                  %macro fibbonacci 1
     2                                  	mov ecx, %1
     3                                  	cmp ecx, 1
     4                                  	jl %%done
     5                                  
     6                                  	mov eax, 0
     7                                  	pushad
     8                                  	push eax
     9                                  	push msg1
    10                                  	call printf
    11                                  	add esp, 8
    12                                  	popad
    13                                  
    14                                  	cmp ecx, 2
    15                                  	jl %%done
    16                                  
    17                                  	mov ebx, 1
    18                                  	pushad
    19                                  	push ebx
    20                                  	push msg1
    21                                  	call printf
    22                                  	add esp, 8	
    23                                  	popad
    24                                  	sub ecx, 2
    25                                  
    26                                  	%%loop:
    27                                  		cmp ecx, 0
    28                                  		je %%done
    29                                  
    30                                  		xchg eax, ebx
    31                                  		add ebx, eax
    32                                  
    33                                  		pushad
    34                                  		push ebx
    35                                  		push msg1
    36                                  		call printf
    37                                  		add esp, 8	
    38                                  		popad
    39                                  	
    40                                  		dec ecx
    41                                  		jmp %%loop
    42                                  		
    43                                  	%%done:
    44                                  %endm
    45                                  
    46                                  section .data
    47 00000000 466972737420256420-     	msg db "First %d numbers of fibbonacci series are: ", 10, 0
    48 00000009 6E756D62657273206F-
    49 00000012 6620666962626F6E61-
    50 0000001B 636369207365726965-
    51 00000024 73206172653A200A00 
    52 0000002D 2564202000              	msg1 db "%d  ", 0
    53 00000032 0A                      	newline db 10
    54                                  
    55                                  section .bss
    56 00000000 <res 00000084>          	abbc resd 33
    57 00000084 <res 00000008>          	pqr resd 2
    58 0000008C <res 000003A4>          	lmn resd 233
    59                                  section .text
    60                                  	global main
    61                                  	extern printf
    62                                  
    63                                  main:
    64 00000000 6A08                    	push 8
    65 00000002 68[00000000]            	push msg
    66 00000007 E8(00000000)            	call printf
    67 0000000C 83C408                  	add esp, 8
    68                                  	fibbonacci 8
    69 0000000F B908000000          <1>  mov ecx, %1
    70 00000014 83F901              <1>  cmp ecx, 1
    71 00000017 7C4D                <1>  jl %%done
    72                              <1> 
    73 00000019 B800000000          <1>  mov eax, 0
    74 0000001E 60                  <1>  pushad
    75 0000001F 50                  <1>  push eax
    76 00000020 68[2D000000]        <1>  push msg1
    77 00000025 E8(00000000)        <1>  call printf
    78 0000002A 83C408              <1>  add esp, 8
    79 0000002D 61                  <1>  popad
    80                              <1> 
    81 0000002E 83F902              <1>  cmp ecx, 2
    82 00000031 7C33                <1>  jl %%done
    83                              <1> 
    84 00000033 BB01000000          <1>  mov ebx, 1
    85 00000038 60                  <1>  pushad
    86 00000039 53                  <1>  push ebx
    87 0000003A 68[2D000000]        <1>  push msg1
    88 0000003F E8(00000000)        <1>  call printf
    89 00000044 83C408              <1>  add esp, 8
    90 00000047 61                  <1>  popad
    91 00000048 83E902              <1>  sub ecx, 2
    92                              <1> 
    93                              <1>  %%loop:
    94 0000004B 83F900              <1>  cmp ecx, 0
    95 0000004E 7416                <1>  je %%done
    96                              <1> 
    97 00000050 93                  <1>  xchg eax, ebx
    98 00000051 01C3                <1>  add ebx, eax
    99                              <1> 
   100 00000053 60                  <1>  pushad
   101 00000054 53                  <1>  push ebx
   102 00000055 68[2D000000]        <1>  push msg1
   103 0000005A E8(00000000)        <1>  call printf
   104 0000005F 83C408              <1>  add esp, 8
   105 00000062 61                  <1>  popad
   106                              <1> 
   107 00000063 49                  <1>  dec ecx
   108 00000064 EBE5                <1>  jmp %%loop
   109                              <1> 
   110                              <1>  %%done:
   111 00000066 68[32000000]            	push newline
   112 0000006B E8(00000000)            	call printf
   113 00000070 83C404                  	add esp, 4	
   114                                  	
   115 00000073 6A0A                    	push 10
   116 00000075 68[00000000]            	push msg
   117 0000007A E8(00000000)            	call printf
   118 0000007F 83C408                  	add esp, 8
   119                                  	fibbonacci 10
   120 00000082 B90A000000          <1>  mov ecx, %1
   121 00000087 83F901              <1>  cmp ecx, 1
   122 0000008A 7C4D                <1>  jl %%done
   123                              <1> 
   124 0000008C B800000000          <1>  mov eax, 0
   125 00000091 60                  <1>  pushad
   126 00000092 50                  <1>  push eax
   127 00000093 68[2D000000]        <1>  push msg1
   128 00000098 E8(00000000)        <1>  call printf
   129 0000009D 83C408              <1>  add esp, 8
   130 000000A0 61                  <1>  popad
   131                              <1> 
   132 000000A1 83F902              <1>  cmp ecx, 2
   133 000000A4 7C33                <1>  jl %%done
   134                              <1> 
   135 000000A6 BB01000000          <1>  mov ebx, 1
   136 000000AB 60                  <1>  pushad
   137 000000AC 53                  <1>  push ebx
   138 000000AD 68[2D000000]        <1>  push msg1
   139 000000B2 E8(00000000)        <1>  call printf
   140 000000B7 83C408              <1>  add esp, 8
   141 000000BA 61                  <1>  popad
   142 000000BB 83E902              <1>  sub ecx, 2
   143                              <1> 
   144                              <1>  %%loop:
   145 000000BE 83F900              <1>  cmp ecx, 0
   146 000000C1 7416                <1>  je %%done
   147                              <1> 
   148 000000C3 93                  <1>  xchg eax, ebx
   149 000000C4 01C3                <1>  add ebx, eax
   150                              <1> 
   151 000000C6 60                  <1>  pushad
   152 000000C7 53                  <1>  push ebx
   153 000000C8 68[2D000000]        <1>  push msg1
   154 000000CD E8(00000000)        <1>  call printf
   155 000000D2 83C408              <1>  add esp, 8
   156 000000D5 61                  <1>  popad
   157                              <1> 
   158 000000D6 49                  <1>  dec ecx
   159 000000D7 EBE5                <1>  jmp %%loop
   160                              <1> 
   161                              <1>  %%done:
   162 000000D9 68[32000000]            	push newline
   163 000000DE E8(00000000)            	call printf
   164 000000E3 83C404                  	add esp, 4	
   165                                  	
   166 000000E6 C3                      	ret
